<html>

<head>
<meta charset="UTF-8">
<title>Examen Estadísica Computacional</title>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
</script>
<script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
</head>

<body>

<h1>Antonio Álvarez Caballero</h1>

<p>Esto es un esqueleto para el examen de Estadística Computacional :)</p>

<h3>Preguntas cortas de teoría</h3>

<p><b>Pregunta</b> ¿Cómo se carga un libro en R?</p>
<p><b>Respuesta</b> Con las funciones <b>library()</b> o <b>require()</b></p>

<p><b>Pregunta</b> ¿Cómo se miran los libros instalados en R?</p>
<p><b>Respuesta</b> Con la función <b>library()</b></p>

<p><b>Pregunta</b> ¿Cómo se miran los libros cargados en R?</p>
<p><b>Respuesta</b> Con la función <b>search()</b></p>

<p><b>Pregunta</b> ¿Cómo se miran las rutas donde R busca los libros?</p>
<p><b>Respuesta</b> Con la función <b>searchpaths()</b></p>

Inciso: Hizo hincapié en el solapamiento de funciones entre libros. ¡Asegurarse de que no cargáis un libro con funciones que ya existen! Pag 57 del manual, sección 3.8.

<p><b>Pregunta</b> ¿Cómo se sabe si existe un libro en R?</p>
<p><b>Respuesta</b> Buscando en CRAN </p>

<h3>Cosillas prácticas</h3>

<!--begin.rcode
library(ggplot2)
library(plotly)
pairs(cars)
end.rcode-->

<p>Pintar funciones:</p>

<!--begin.rcode fig.width=7, fig.height=6
data <- data.frame(x = 1:500)
ggplot(data, aes(x)) +
  stat_function(fun=sin, n=nrow(data), geom="point")
plot(x = 1:500, y = sin(1:500))
end.rcode-->

<p>Pintar funciones de $\mathbb{R}^2$:</p>

<!--begin.rcode fig.width=7, fig.height=6
f <- function(x,y) {(x-10)^2 + (y-20)^2 - 400}

x <- seq(-50,50,length=1000)
y <- seq(-50,50,length=1000)
z <- outer(x,y,f)

contour(x,y,z,levels=0,drawlabels=FALSE, main=expression((x-10)^2 + (y-20)^2 - 400), xlab="", ylab="", xlim=c(-50, 50), ylim=c(-50, 50))
end.rcode-->

<p> Para medir el tiempo se usa <b>Sys.time</b> o <b>system.time()</b> </p>

<!--begin.rcode
system.time(replicate(500000, factorial(100)))

end.rcode-->

Para el polígono con ggplot

<!--begin.rcode
data.poly <- data.frame(x = c(-100,-100,100,100), y = c(-100,100,100,-100))
data.random <- data.frame(x = runif(100,-100,100), y = runif(100,-100,100))
ggplot() + geom_line(data = data.random, aes(x,y), colour = "blue") +  geom_polygon(data = data.poly, aes(x,y),colour="black",fill=NA)
end.rcode-->


<h2> Ejercicio del dado </h2>

<h3> Escribe una función, <b>Dado(n=100)</b>, que simule el lanzamiento de un dado en n ocasiones y devuelva un vector con los resultados.</h3>

<!--begin.rcode
Dado <- function(n = 100) {
  dado <- sample(1:6, n, replace = TRUE)
  return(dado)
}
end.rcode-->

La prueba:

<!--begin.rcode
Dado(12)
end.rcode-->

<h3> CuatroDados(n=100) que simule el lanzamiento de cuatro dados en n ocasiones y devolver una lista con los resultados.</h3>

<!--begin.rcode
CuatroDados <- function(n = 100) {
  cuatroDados <- do.call(cbind, replicate(n = n, Dado(4), simplify = FALSE))
  return(cuatroDados)
}
end.rcode-->

La prueba

<!--begin.rcode
CuatroDados(12)
end.rcode-->


<h3> SumaDeCuatroDados(n=100) </h3>

<!--begin.rcode
SumaDeCuatroDados <- function(n=100) {
  dados <- CuatroDados(n)
  suma <- apply(X = dados, MARGIN = 2, sum)
  return(suma)
}
end.rcode-->

La prueba:

<!--begin.rcode
SumaDeCuatroDados(12)
end.rcode-->

<h3> P[sum < 12] </h3>

<!--begin.rcode
sumas <- SumaDeCuatroDados(5000)
mean(sumas < 12)
end.rcode-->

<h3> Lo mismo pero para cualquier x </h3>

<!--begin.rcode
ProbabilidadSumaDeCuatroDados <- function(x = 12, n = 5000) {
  sumas <- SumaDeCuatroDados(n)
  mean(sumas < x)
}
end.rcode-->

<!--begin.rcode
ProbabilidadSumaDeCuatroDados(x = 12, n = 5000)
end.rcode-->


</body>


</html>
