<html>

<head>
    <meta charset="utf-8">

    <!-- Etiqueta imprescindible para que los dispositivos pongan el viewport
    del mismo tamaño que su ancho y no tengan zoom inicial -->
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Hoja de estilos para empezar con un estilo (casi) nulo (obtenida en http://cssreset.com) -->
    <link href="CSS/reset.css" rel="stylesheet" type="text/css" />

    <!-- Tipografías usadas -->
    <link href='https://fonts.googleapis.com/css?family=Merriweather' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Vollkorn:400,400italic' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Cousine' rel='stylesheet' type='text/css'>

    <!-- Hoja de estilos general -->
    <link href="CSS/estilo.css" rel="stylesheet" type="text/css" />

    <title>EC: Alejandro García Montoro - 2</title>
</head>

<body>
    <!-- Div necesario para centrar todo el contenido y darle un ancho específico -->
    <div id="wrapper">

        <header>
            <div id="nombre">
                <h1>Alejandro</h1>
                <h2>García Montoro</h2>
            </div>
        </header>
        
        <nav id="enlaces">
            <ul>
                <li>
                    <a href="./datos.html">Ejercicio 1</a>
                </li>
                <li>
                    <a href="./1.html">Ejercicio 2</a>
                </li>
                <li>
                    <a href="./3.html">Ejercicio 3</a>
                </li>
            </ul>
        </nav>

        <div id="examen">
            Soluciones al segundo ejercicio del examen final de la asignatura Estadística Computacional
        </div>

        <div id="datos">
            <h2>Datos</h2>

            <div id="datos_contenido">
                <dl>
                    <dt>DNI</dt>
                        <dd>76628233F</dd>
                    <dt>Grupo</dt>
                        <dd>Doble grado en ingeniería informática y matemáticas.</dd>
                </dl>
            </div>
        </div>

        <section id="soluciones">
            <h2>Soluciones al examen</h2>

            <div id="textoSol">
                <div class="ejercicio">
                    <div class="enunciado">
                        <p class="cabecera">Enunciado:<p>
                        <p>
                          Considera en el plano un cuadrado centrado en el origen, de lado 200.
                        </p>
                        
                        <p>
                          Considera un punto que comienza en el origen y se desplaza del siguiente modo:
                          <ol class="lista">
                            <li>En cada paso se lanzan dos monedas.</li>
                            <li>Si la primera moneda es cara, el punto se mueve una unidad a la derecha, si es cruz lo hace a la izquierda.</li>
                            <li>Si la segunda moneda es cara, el punto se mueve una unidad hacia arriba, si es cruz lo hace hacia abajo.</li>
                            <li>El proceso finaliza si se llega a algún punto del perímetro del cuadrado.</li>
                          </ol>
                        </p>
                    </div>
                </div>
                
                <div class="ejercicio">
                    <div class="enunciado">
                        <p class="cabecera">Apartado 1:<p>
                        <p>
                            Función que simule el movimiento del punto y devuelva:
                            <ol class="lista">
                              <li> La progresión aleatoria definida.</li>
                              <li> Cuántos pasos han sido necesarios para llegar al límite.</li>
                            </ol>
                        </p>
                    </div>
                    <div class="solucion">
                        <p>Definimos la función requerida, en la que el lanzamiento de la moneda lo simularemos con la función <code>sample</code>, tomando dos muestras con reemplazamiento del conjunto <code>{1,2}</code>, donde <code>1</code> representa la cara de la moneda y <code>2</code>, la cruz.</p>

<!--begin.rcode 1-1
f <- function(){
  # Definimos la posición inicial
  pos <- c(0,0)
  
  # Inicializamos la matriz que contendrá, en la fila i-ésima, la posición
  # de la partícula en el instante i-ésimo
  camino <- matrix(pos, ncol=2, byrow=T)
  
  # Inicializamos el contador de iteraciones
  iteraciones <- 0
  
  while( !(100 %in% abs(pos))){
    # Simulamos las dos monedas: 1 es cara; 2 es cruz:
    monedas <- sample(1:2, 2, replace = T)
    
    # Determinamos el movimiento: si la primera moneda es cara (1), nos
    # movemos una unidad a la derecha; es decir, sumamos uno en el eje X;
    # si es cruz (2), a la izquierda: restamos uno en el eje X. Hacemos
    # lo mismo con la segunda moneda, que representa el eje Y.
    movimiento <- ifelse(monedas == 1, 1, -1)
    
    # Actualizamos la posición.
    pos <- pos + movimiento
    
    # Actualizamos la progresión
    camino <- rbind(camino, pos)
    
    # Actualizamos las iteraciones
    iteraciones <- iteraciones + 1
  }
  
  return(list(Progresion = camino, Pasos = iteraciones))
}
end.rcode-->
                    </div>
                </div>

                <div class="ejercicio">
                    <div class="enunciado">
                        <p class="cabecera">Apartado 2:<p>
                        <p>
                            Una simulación del proceso y representación gráfica del movimiento.
                        </p>
                    </div>
                    <div class="solucion">
                        <p>Para simular el proceso simplemente tenemos que llamar a la función con el número máximo de iteraciones que se requieran. Podemos llamarlo con <code>10000</code> iteraciones:</p>
                        
                        
<!--begin.rcode 1-2
# Generamos la simulación
res <- f()
end.rcode-->

                        <p>Para hacer un gráfico del proceso, simplemente tenemos que recuperar el camino con el elemento <code>Progresion</code> de la lista devuelta por el método y dibujar los puntos de ese vector. Podemos añadir, para la mejor visualización del gráfico, unas líneas que representen el borde del recinto y un par de puntos que representen el punto inicial y el punto final.
                      

<!--begin.rcode 1-3
# Gráfico del progreso
plot(res$Progresion, type="l", col="steelblue", asp=1,
     xlim=c(-100,100), xlab="Eje X",
     ylim=c(-100,100), ylab="Eje Y",
     main="Progresión del punto")

# Añadimos los puntos iniciales y final
punto.inicial <- c(0,0)
punto.final <- t(res$Progresion[nrow(res$Progresion),])
points(rbind(punto.inicial, punto.final), pch=20, col="blue")

# Añadimos los bordes del recinto cuadrado con polygon
polygon(c(-100,100,100,-100), c(100,100,-100,-100), border = "coral")
end.rcode-->
                    </div>
                </div>

                <div class="ejercicio ultimo">
                    <div class="enunciado">
                        <p class="cabecera">Apartado 3:<p>
                        <p>
                            Una función, D, con un argumento que permita repetir un número de veces, <code>n</code>, este proceso y devuelva un vector con el número de pasos necesarios para salir del recinto en cada repetición.
                        </p>
                    </div>
                    <div class="solucion">
                        <p>Definimos la función solicitada, en la que usamos <code>replicate</code>, una función de <code>R</code> que permite repetir un proceso tantas veces como se le indique. Como lo que queremos es el número de pasos, lo que haremos será repetir <code>n</code> veces la llamada a <code>movimiento</code>, tomando el resultado que nos interesa: el elemento <code>Pasos</code> de la lista devuelta:</p>

<!--begin.rcode 1-4
# Definimos la función para repetir el experimento n veces
D <- function(n = 1000){
  return(replicate(n, f()$Pasos))
}
end.rcode-->
                
                        <p>Esta función se puede usar, por ejemplo, para tomar la media de pasos necesarios para salir del recinto en 10 repeticiones del proceso del movimiento. Para ello usamos <code>mean</code> sobre el vector devuelto por la función anteriormente definida. Además, podemos usar la función <code>Sys.time()</code> para medir el tiempo medio que el ordenador tarda en realizar el procedimiento.</p>
<!--begin.rcode 1-5
# Definimos el número de repeticiones
num.rep <- 10

# Tomamos nota del reloj en el instante actual
inicio <- Sys.time()

# Hacemos las repeticiones solicitadas
pasos <- D(num.rep)

# Tomamos nota del reloj en el instante actual
final <- Sys.time()

# Calculamos el tiempo total
tiempo.total <- final - inicio

# Nos aseguramos de que estamos trabajando con segundos
units(tiempo.total) <- "secs"

# Calculamos medias de pasos y de tiempos
pasos.media <- mean(pasos)
tiempo.media <- (tiempo.total)/num.rep
end.rcode-->

                        <p>Tenemos así que, de media, se necesitan unos <!-- rinline I(pasos.media) --> pasos para salir del recinto. Además podemos obtener que el ordenador ha necesitado, de media, <!-- rinline I(tiempo.media) --> segundos en calcular la trayectoria del punto hasta que sale del recinto.
                </div>
                </div>
            </div>
        </section>
        
        <div class="clear"></div>
    </div>
    <footer>Granada, a 8 de junio de 2016</footer>
</body>

</html>
